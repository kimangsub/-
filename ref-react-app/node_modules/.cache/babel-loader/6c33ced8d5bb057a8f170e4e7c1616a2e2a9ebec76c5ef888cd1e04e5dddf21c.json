{"ast":null,"code":"var _jsxFileName = \"D:\\\\kimangsub\\\\3.WEB\\\\work\\\\react-workspace\\\\ref-react-app\\\\src\\\\RefSample.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RefSample() {\n  _s();\n  //refNum = {current : 0}\n  const refNum = useRef(0);\n\n  //stateNum = 0;\n  const [stateNum, setStateNum] = useState(0);\n  console.log('렌더링 발생');\n\n  //렌더링을 위한 변수\n  const [render, setRender] = useState(true);\n  const increaseRefNum = () => {\n    //값을 1 증가 (근데, 재렌더링은 안 함)\n    refNum.current = refNum.current + 1;\n    console.log(`refNum : ${refNum.current}`);\n  };\n  const increaseStateNum = () => {\n    //수정자 함수를 호출하면 재렌더링이 됨\n    setStateNum(stateNum => stateNum + 1);\n  };\n\n  //자주 바뀌는 값을 state에 넣어놓으면 바뀔 때마다 렌더링이 일어나서 성능이 떨어질 수 있다.\n  //이 때 useRef를 사용하면 값이 바뀌어도 렌더링이 발생하지 않아 성능저하를 막을 수 있다.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"refNum : \", refNum.current, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"stateNum : \", stateNum, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increaseRefNum,\n      children: \"refNum + 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increaseStateNum,\n      children: \"stateNum + 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: render => setRender(!render),\n      children: \"\\uC7AC\\uB80C\\uB354\\uB9C1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(RefSample, \"HN5oYXzy14CKivzcrvPagWguGpA=\");\n_c = RefSample;\nexport default RefSample;\nvar _c;\n$RefreshReg$(_c, \"RefSample\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","RefSample","_s","refNum","stateNum","setStateNum","console","log","render","setRender","increaseRefNum","current","increaseStateNum","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/kimangsub/3.WEB/work/react-workspace/ref-react-app/src/RefSample.js"],"sourcesContent":["import React, {useState, useRef} from 'react'\r\n\r\nfunction RefSample() {\r\n    //refNum = {current : 0}\r\n    const refNum = useRef(0);\r\n\r\n    //stateNum = 0;\r\n    const [stateNum, setStateNum] = useState(0);\r\n\r\n    console.log('렌더링 발생');\r\n\r\n    //렌더링을 위한 변수\r\n    const [render, setRender] = useState(true);\r\n\r\n    const increaseRefNum = () => {\r\n        //값을 1 증가 (근데, 재렌더링은 안 함)\r\n        refNum.current = refNum.current + 1;\r\n        console.log(`refNum : ${refNum.current}`)\r\n    }\r\n\r\n    const increaseStateNum = () => {\r\n        //수정자 함수를 호출하면 재렌더링이 됨\r\n        setStateNum(stateNum => stateNum + 1)\r\n    }\r\n\r\n    //자주 바뀌는 값을 state에 넣어놓으면 바뀔 때마다 렌더링이 일어나서 성능이 떨어질 수 있다.\r\n    //이 때 useRef를 사용하면 값이 바뀌어도 렌더링이 발생하지 않아 성능저하를 막을 수 있다.\r\n    return(\r\n        <div>\r\n            <h1>refNum : {refNum.current} </h1>\r\n            <h1>stateNum : {stateNum} </h1>\r\n            <button onClick={increaseRefNum}>refNum + 1</button>\r\n            <button onClick={increaseStateNum}>stateNum + 1</button>\r\n            <button onClick={render => setRender(!render)}>재렌더링</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RefSample;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,MAAM,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB;EACA,MAAMC,MAAM,GAAGL,MAAM,CAAC,CAAC,CAAC;;EAExB;EACA,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE3CS,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;;EAErB;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMa,cAAc,GAAGA,CAAA,KAAM;IACzB;IACAP,MAAM,CAACQ,OAAO,GAAGR,MAAM,CAACQ,OAAO,GAAG,CAAC;IACnCL,OAAO,CAACC,GAAG,CAAC,YAAYJ,MAAM,CAACQ,OAAO,EAAE,CAAC;EAC7C,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3B;IACAP,WAAW,CAACD,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;EACzC,CAAC;;EAED;EACA;EACA,oBACIJ,OAAA;IAAAa,QAAA,gBACIb,OAAA;MAAAa,QAAA,GAAI,WAAS,EAACV,MAAM,CAACQ,OAAO,EAAC,GAAC;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCjB,OAAA;MAAAa,QAAA,GAAI,aAAW,EAACT,QAAQ,EAAC,GAAC;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BjB,OAAA;MAAQkB,OAAO,EAAER,cAAe;MAAAG,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACpDjB,OAAA;MAAQkB,OAAO,EAAEN,gBAAiB;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxDjB,OAAA;MAAQkB,OAAO,EAAEV,MAAM,IAAIC,SAAS,CAAC,CAACD,MAAM,CAAE;MAAAK,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEd;AAACf,EAAA,CAlCQD,SAAS;AAAAkB,EAAA,GAATlB,SAAS;AAoClB,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}