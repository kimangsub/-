{"ast":null,"code":"var _jsxFileName = \"D:\\\\kimangsub\\\\3.WEB\\\\work\\\\react-workspace\\\\-\\\\redux-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\n// import './App.css';\n\n//Redux와 React를 연결하는 데 필요한 Provider, useDispatch, useSelector를 import\nimport { Provider, useDispatch, useSelector } from 'react-redux';\n\n// //Redux 스토어를 import\n// import store from './redux/store';\n\n// //액션 생성 함수를 import\n// //아래 함수들은 상태를 변경하는 액션을 dispatch하기 위해 사용된다.\n// import { increment, decrement } from './redux/actions';\n\nimport React, { useState } from 'react';\nimport { addTodo, removeTodo } from './Todo/actions';\n\n// function Counter(){\n//   //useSelector : Redux에서 store에 저장되어 있는 state를 읽어오는 hook\n//   const count = useSelector(state => state.count);\n\n//   //useDispatch : store에 action을 보낼 수 있는 hook\n//   const dispatch = useDispatch();\n//   return (\n//     <div>\n//       {/* 현재 state인 count값을 화면에 출력한다. */}\n//       <h1>Counter : {count}</h1>\n//       {/* Increment 버튼을 클릭하면 increment() 액션을 디스패치한다. */}\n//       <button onClick={() => dispatch(increment())}>increment</button>\n//       <button onClick={() => dispatch(decrement())}>decrement</button>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   const [input, setInput] = useState(''); //입력값을 관리하는 state\n//   const todos = useSelector(state => state.todos); //redux에서 todos state를 가져옴\n//   const dispatch = useDispatch(); //액션을 dispatch하는 함수 가져오기\n\n//   //추가 버튼을 눌렀을 때 input태그에 있는 내용을 li에 추가하기\n//   const handleAddTodo = () => {\n//     if(input.trim()){ //input태그의 값이 비었는지 검사\n//       dispatch(addTodo(Date.now(), input)); //id와 내용을 액션에 전송해서 dispatch가 리듀서로 전송\n//       setInput(''); //입력창 비우기\n//     }\n//   }\n\n//   const handleRemoveTodo = (id) => {\n//     dispatch(removeTodo(id)); //Todo를 삭제\n//   }\n\n// return(\n// //Provider : store를 애플리케이션 전체에 제공\n// //Provider 안에 있는 모든 컴포넌트는 store에 접근할 수 있다.\n//   <Provider store={store}>\n//     <Counter />\n//   </Provider>\n// )\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoApp() {\n  _s();\n  const [input, setInput] = useState(''); // 입력값을 관리하는 로컬 상태\n  const todos = useSelector(state => state.todos); // Redux에서 todos 상태를 가져옴\n  const dispatch = useDispatch(); // 액션을 디스패치하는 함수 가져오기\n\n  const handleAddTodo = () => {\n    if (input.trim()) {\n      dispatch(addTodo(Date.now(), input)); // 새로운 Todo를 추가 (id는 현재 시간으로 고유값 생성)\n      setInput(''); // 입력창 비우기\n    }\n  };\n  const handleRemoveTodo = id => {\n    dispatch(removeTodo(id)); // Todo를 삭제\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Add a new todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTodo,\n      children: \"Add Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [todo.text, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleRemoveTodo(todo.id),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoApp, \"gsG/BAeaTkCWRp0GXGTMYPeTeUI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = TodoApp;\nexport default TodoApp;\nvar _c;\n$RefreshReg$(_c, \"TodoApp\");","map":{"version":3,"names":["logo","Provider","useDispatch","useSelector","React","useState","addTodo","removeTodo","jsxDEV","_jsxDEV","TodoApp","_s","input","setInput","todos","state","dispatch","handleAddTodo","trim","Date","now","handleRemoveTodo","id","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","todo","text","_c","$RefreshReg$"],"sources":["D:/kimangsub/3.WEB/work/react-workspace/-/redux-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\n// import './App.css';\n\n//Redux와 React를 연결하는 데 필요한 Provider, useDispatch, useSelector를 import\nimport { Provider, useDispatch, useSelector } from 'react-redux';\n\n// //Redux 스토어를 import\n// import store from './redux/store';\n\n// //액션 생성 함수를 import\n// //아래 함수들은 상태를 변경하는 액션을 dispatch하기 위해 사용된다.\n// import { increment, decrement } from './redux/actions';\n\nimport React, {useState} from 'react';\nimport { addTodo, removeTodo } from './Todo/actions';\n\n// function Counter(){\n//   //useSelector : Redux에서 store에 저장되어 있는 state를 읽어오는 hook\n//   const count = useSelector(state => state.count);\n\n//   //useDispatch : store에 action을 보낼 수 있는 hook\n//   const dispatch = useDispatch();\n//   return (\n//     <div>\n//       {/* 현재 state인 count값을 화면에 출력한다. */}\n//       <h1>Counter : {count}</h1>\n//       {/* Increment 버튼을 클릭하면 increment() 액션을 디스패치한다. */}\n//       <button onClick={() => dispatch(increment())}>increment</button>\n//       <button onClick={() => dispatch(decrement())}>decrement</button>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   const [input, setInput] = useState(''); //입력값을 관리하는 state\n//   const todos = useSelector(state => state.todos); //redux에서 todos state를 가져옴\n//   const dispatch = useDispatch(); //액션을 dispatch하는 함수 가져오기\n\n//   //추가 버튼을 눌렀을 때 input태그에 있는 내용을 li에 추가하기\n//   const handleAddTodo = () => {\n//     if(input.trim()){ //input태그의 값이 비었는지 검사\n//       dispatch(addTodo(Date.now(), input)); //id와 내용을 액션에 전송해서 dispatch가 리듀서로 전송\n//       setInput(''); //입력창 비우기\n//     }\n//   }\n\n//   const handleRemoveTodo = (id) => {\n//     dispatch(removeTodo(id)); //Todo를 삭제\n//   }\n\n  // return(\n  // //Provider : store를 애플리케이션 전체에 제공\n  // //Provider 안에 있는 모든 컴포넌트는 store에 접근할 수 있다.\n  //   <Provider store={store}>\n  //     <Counter />\n  //   </Provider>\n  // )\n\n  function TodoApp() {\n    const [input, setInput] = useState(''); // 입력값을 관리하는 로컬 상태\n    const todos = useSelector((state) => state.todos); // Redux에서 todos 상태를 가져옴\n    const dispatch = useDispatch(); // 액션을 디스패치하는 함수 가져오기\n  \n    const handleAddTodo = () => {\n      if (input.trim()) {\n        dispatch(addTodo(Date.now(), input)); // 새로운 Todo를 추가 (id는 현재 시간으로 고유값 생성)\n        setInput(''); // 입력창 비우기\n      }\n    };\n  \n    const handleRemoveTodo = (id) => {\n      dispatch(removeTodo(id)); // Todo를 삭제\n    };\n\n  return(\n    <div>\n      <h1>Todo List</h1>\n      <input type='text' value={input} onChange={(e) => setInput(e.target.value)} placeholder='Add a new todo' />\n      <button onClick={handleAddTodo}>Add Todo</button>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            <button onClick={() => handleRemoveTodo(todo.id)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TodoApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}