{"ast":null,"code":"import logo from './logo.svg';\nimport './App.css';\n\n//Redux와 React를 연결하는 데 필요한 Provider, useDispatch, useSelector를 import\n// import { Provider, useDispatch, useSelector } from 'react-redux';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\n\n// //Redux 스토어를 import\nimport store from './cart/store';\n\n// //액션 생성 함수를 import\n// //아래 함수들은 상태를 변경하는 액션을 dispatch하기 위해 사용된다.\n// import { increment, decrement } from './redux/actions';\n\nimport React, { useState } from 'react';\n// import { addTodo, removeTodo } from './Todo/actions';\n\nimport { login, logout } from './cart/actions';\n\n// function Counter(){\n//   //useSelector : Redux에서 store에 저장되어 있는 state를 읽어오는 hook\n//   const count = useSelector(state => state.count);\n\n//   //useDispatch : store에 action을 보낼 수 있는 hook\n//   const dispatch = useDispatch();\n//   return (\n//     <div>\n//       {/* 현재 state인 count값을 화면에 출력한다. */}\n//       <h1>Counter : {count}</h1>\n//       {/* Increment 버튼을 클릭하면 increment() 액션을 디스패치한다. */}\n//       <button onClick={() => dispatch(increment())}>increment</button>\n//       <button onClick={() => dispatch(decrement())}>decrement</button>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   const [input, setInput] = useState(''); //입력값을 관리하는 state\n//   const todos = useSelector(state => state.todos); //redux에서 todos state를 가져옴\n//   const dispatch = useDispatch(); //액션을 dispatch하는 함수 가져오기\n\n//   //추가 버튼을 눌렀을 때 input태그에 있는 내용을 li에 추가하기\n//   const handleAddTodo = () => {\n//     if(input.trim()){ //input태그의 값이 비었는지 검사\n//       dispatch(addTodo(Date.now(), input)); //id와 내용을 액션에 전송해서 dispatch가 리듀서로 전송\n//       setInput(''); //입력창 비우기\n//     }\n//   }\n\n//   const handleRemoveTodo = (id) => {\n//     dispatch(removeTodo(id)); //Todo를 삭제\n//   }\n\n// return(\n// //Provider : store를 애플리케이션 전체에 제공\n// //Provider 안에 있는 모든 컴포넌트는 store에 접근할 수 있다.\n//   <Provider store={store}>\n//     <Counter />\n//   </Provider>\n// )\n\n//   function TodoApp() {\n//     const [input, setInput] = useState(''); // 입력값을 관리하는 로컬 상태\n//     const todos = useSelector((state) => state.todos || []); // Redux에서 todos 상태를 가져옴\n//     const dispatch = useDispatch(); // 액션을 디스패치하는 함수 가져오기\n\n//     const handleAddTodo = () => {\n//       if (input.trim()) {\n//         dispatch(addTodo(Date.now(), input)); // 새로운 Todo를 추가 (id는 현재 시간으로 고유값 생성)\n//         setInput(''); // 입력창 비우기\n//       }\n//     };\n\n//     const handleRemoveTodo = (id) => {\n//       dispatch(removeTodo(id)); // Todo를 삭제\n//     };\n\n//   return(\n//     <div>\n//       <h1>Todo List</h1>\n//       <input type='text' value={input} onChange={(e) => setInput(e.target.value)} placeholder='Add a new todo' />\n//       <button onClick={handleAddTodo}>Add Todo</button>\n//       <ul>\n//         {todos.map((todo) => (\n//           <li key={todo.id}>\n//             {todo.text}\n//             <button onClick={() => handleRemoveTodo(todo.id)}>Remove</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   )\n// }\n// function App() {\n//   const [usernameInput, setUsernameInput] = useState(''); // 입력 필드 상태\n//   const { isLoggedIn, username } = useSelector((state) => state); // Redux 상태에서 로그인 정보 가져오기\n//   const dispatch = useDispatch(); // 액션을 디스패치하기 위한 훅\n\n//   const handleLogin = () => {\n//     if (usernameInput.trim()) {\n//       dispatch(login(usernameInput)); // 로그인 액션 디스패치\n//       setUsernameInput(''); // 입력 필드 초기화\n//     }\n//   }\n\n//   const handleLogout = () => {\n//     dispatch(logout()); // 로그아웃 액션 디스패치\n//   };\n\n//   return (\n//     <div>\n//       <h1>Login Status</h1>\n//       {isLoggedIn ? (\n//         <div>\n//           <p>Welcome, {username}</p>\n//           <button onClick={handleLogout}>Logout</button>\n//         </div>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"text\"\n//             value={usernameInput}\n//             onChange={(e) => setUsernameInput(e.target.value)}\n//             placeholder=\"Enter your username\"\n//           />\n//           <button onClick={handleLogin}>Login</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nexport default App;","map":{"version":3,"names":["logo","Provider","useDispatch","useSelector","store","React","useState","login","logout","App"],"sources":["D:/kimangsub/3.WEB/work/react-workspace/-/redux-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\n\n//Redux와 React를 연결하는 데 필요한 Provider, useDispatch, useSelector를 import\n// import { Provider, useDispatch, useSelector } from 'react-redux';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\n\n// //Redux 스토어를 import\nimport store from './cart/store';\n\n// //액션 생성 함수를 import\n// //아래 함수들은 상태를 변경하는 액션을 dispatch하기 위해 사용된다.\n// import { increment, decrement } from './redux/actions';\n\nimport React, { useState } from 'react';\n// import { addTodo, removeTodo } from './Todo/actions';\n\nimport { login, logout } from './cart/actions';\n\n// function Counter(){\n//   //useSelector : Redux에서 store에 저장되어 있는 state를 읽어오는 hook\n//   const count = useSelector(state => state.count);\n\n//   //useDispatch : store에 action을 보낼 수 있는 hook\n//   const dispatch = useDispatch();\n//   return (\n//     <div>\n//       {/* 현재 state인 count값을 화면에 출력한다. */}\n//       <h1>Counter : {count}</h1>\n//       {/* Increment 버튼을 클릭하면 increment() 액션을 디스패치한다. */}\n//       <button onClick={() => dispatch(increment())}>increment</button>\n//       <button onClick={() => dispatch(decrement())}>decrement</button>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   const [input, setInput] = useState(''); //입력값을 관리하는 state\n//   const todos = useSelector(state => state.todos); //redux에서 todos state를 가져옴\n//   const dispatch = useDispatch(); //액션을 dispatch하는 함수 가져오기\n\n//   //추가 버튼을 눌렀을 때 input태그에 있는 내용을 li에 추가하기\n//   const handleAddTodo = () => {\n//     if(input.trim()){ //input태그의 값이 비었는지 검사\n//       dispatch(addTodo(Date.now(), input)); //id와 내용을 액션에 전송해서 dispatch가 리듀서로 전송\n//       setInput(''); //입력창 비우기\n//     }\n//   }\n\n//   const handleRemoveTodo = (id) => {\n//     dispatch(removeTodo(id)); //Todo를 삭제\n//   }\n\n  // return(\n  // //Provider : store를 애플리케이션 전체에 제공\n  // //Provider 안에 있는 모든 컴포넌트는 store에 접근할 수 있다.\n  //   <Provider store={store}>\n  //     <Counter />\n  //   </Provider>\n  // )\n\n//   function TodoApp() {\n//     const [input, setInput] = useState(''); // 입력값을 관리하는 로컬 상태\n//     const todos = useSelector((state) => state.todos || []); // Redux에서 todos 상태를 가져옴\n//     const dispatch = useDispatch(); // 액션을 디스패치하는 함수 가져오기\n  \n//     const handleAddTodo = () => {\n//       if (input.trim()) {\n//         dispatch(addTodo(Date.now(), input)); // 새로운 Todo를 추가 (id는 현재 시간으로 고유값 생성)\n//         setInput(''); // 입력창 비우기\n//       }\n//     };\n  \n//     const handleRemoveTodo = (id) => {\n//       dispatch(removeTodo(id)); // Todo를 삭제\n//     };\n\n//   return(\n//     <div>\n//       <h1>Todo List</h1>\n//       <input type='text' value={input} onChange={(e) => setInput(e.target.value)} placeholder='Add a new todo' />\n//       <button onClick={handleAddTodo}>Add Todo</button>\n//       <ul>\n//         {todos.map((todo) => (\n//           <li key={todo.id}>\n//             {todo.text}\n//             <button onClick={() => handleRemoveTodo(todo.id)}>Remove</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   )\n// }\n// function App() {\n//   const [usernameInput, setUsernameInput] = useState(''); // 입력 필드 상태\n//   const { isLoggedIn, username } = useSelector((state) => state); // Redux 상태에서 로그인 정보 가져오기\n//   const dispatch = useDispatch(); // 액션을 디스패치하기 위한 훅\n\n//   const handleLogin = () => {\n//     if (usernameInput.trim()) {\n//       dispatch(login(usernameInput)); // 로그인 액션 디스패치\n//       setUsernameInput(''); // 입력 필드 초기화\n//     }\n//   }\n\n//   const handleLogout = () => {\n//     dispatch(logout()); // 로그아웃 액션 디스패치\n//   };\n\n//   return (\n//     <div>\n//       <h1>Login Status</h1>\n//       {isLoggedIn ? (\n//         <div>\n//           <p>Welcome, {username}</p>\n//           <button onClick={handleLogout}>Logout</button>\n//         </div>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"text\"\n//             value={usernameInput}\n//             onChange={(e) => setUsernameInput(e.target.value)}\n//             placeholder=\"Enter your username\"\n//           />\n//           <button onClick={handleLogin}>Login</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nexport default App;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;;AAGlB;AACA;AACA,SAASC,QAAQ,EAAEC,WAAW,EAAEC,WAAW,QAAQ,aAAa;;AAEhE;AACA,OAAOC,KAAK,MAAM,cAAc;;AAEhC;AACA;AACA;;AAEA,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;;AAEA,SAASC,KAAK,EAAEC,MAAM,QAAQ,gBAAgB;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}