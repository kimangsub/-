{"ast":null,"code":"var _jsxFileName = \"D:\\\\kimangsub\\\\3.WEB\\\\work\\\\react-workspace\\\\-\\\\async-react-app\\\\src\\\\UserList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserList() {\n  _s();\n  //유저 정보를 담기 위한 state\n  const [users, SetUsers] = useState([]);\n  //로딩 상태를 관리하기 위한 state\n  const [loading, SetLoading] = useState(true);\n  //에러 상태를 관리하기 위한 state\n  const [error, SetError] = useState(null);\n\n  //fetch를 사용하기 위해 useEffect를 사용한다.\n  useEffect(() => {\n    //비동기 함수 정의\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n        if (!response.ok) {\n          throw new Error('데이터를 불러는데 실패했습니다.');\n        }\n        const data = await response.json();\n        SetUsers(data); //데이터를 useState에 저장\n      } catch (err) {\n        SetError(err.message);\n      } finally {\n        SetLoading(false);\n      }\n    };\n    fetchUsers();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB85C\\uB529\\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uC5D0\\uB7EC \\uBC1C\\uC0DD : \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n\n  //데이터를 성공적으로 불러왔을 때 표시할 UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC0AC\\uC6A9\\uC790 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: post.title\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(UserList, \"0YdADIAly1mm5b5WIcLqazsL2FM=\");\n_c = UserList;\nexport default UserList;\nvar _c;\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserList","_s","users","SetUsers","loading","SetLoading","error","SetError","fetchUsers","response","fetch","ok","Error","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","post","title","id","_c","$RefreshReg$"],"sources":["D:/kimangsub/3.WEB/work/react-workspace/-/async-react-app/src/UserList.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\nfunction UserList(){\r\n    //유저 정보를 담기 위한 state\r\n    const [users, SetUsers] = useState([]);\r\n    //로딩 상태를 관리하기 위한 state\r\n    const [loading, SetLoading] = useState(true);\r\n    //에러 상태를 관리하기 위한 state\r\n    const [error, SetError] = useState(null);\r\n\r\n    //fetch를 사용하기 위해 useEffect를 사용한다.\r\n    useEffect(() => {\r\n        //비동기 함수 정의\r\n        const fetchUsers = async () => {\r\n            try{\r\n                const response = await fetch('https://jsonplaceholder.typicode.com/users')\r\n                \r\n                if(!response.ok){\r\n                    throw new Error('데이터를 불러는데 실패했습니다.');\r\n                }\r\n                const data = await response.json();\r\n                SetUsers(data); //데이터를 useState에 저장\r\n            } catch(err){\r\n                SetError(err.message);\r\n            } finally{\r\n                SetLoading(false);\r\n            }\r\n        }\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    if(loading){\r\n        return (<p>로딩중...</p>);\r\n    }\r\n\r\n    if(error){\r\n        return(<p>에러 발생 : {error}</p>)\r\n    }\r\n\r\n    //데이터를 성공적으로 불러왔을 때 표시할 UI\r\n    return(\r\n        <div>\r\n            <h1>사용자 목록</h1>\r\n            <ul>\r\n                {users.map((user) => (\r\n                    <li key={user.id}>{post.title}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,QAAQA,CAAA,EAAE;EAAAC,EAAA;EACf;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C;EACA,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAG;QACC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAE1E,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAC;UACZ,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;QACxC;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC,OAAME,GAAG,EAAC;QACRR,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC;MACzB,CAAC,SAAQ;QACLX,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IACDG,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAGJ,OAAO,EAAC;IACP,oBAAQL,OAAA;MAAAkB,QAAA,EAAG;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACzB;EAEA,IAAGf,KAAK,EAAC;IACL,oBAAOP,OAAA;MAAAkB,QAAA,GAAG,8BAAQ,EAACX,KAAK;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACjC;;EAEA;EACA,oBACItB,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACftB,OAAA;MAAAkB,QAAA,EACKf,KAAK,CAACoB,GAAG,CAAEC,IAAI,iBACZxB,OAAA;QAAAkB,QAAA,EAAmBO,IAAI,CAACC;MAAK,GAApBF,IAAI,CAACG,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACpB,EAAA,CAjDQD,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAmDjB,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}