{"ast":null,"code":"var _jsxFileName = \"D:\\\\kimangsub\\\\3.WEB\\\\work\\\\react-workspace\\\\-\\\\async-react-app\\\\src\\\\FetchExam.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FetchExam() {\n  _s();\n  const [posts, SetPosts] = useState([]); //데이터를 저장할 state\n  const [loading, SetLoading] = useState(true); //로딩 상태 관리\n  const [error, SetError] = useState(null); //에러 상태 관리\n\n  useEffect(() => {\n    //비동기적으로 데이터 호출\n    const fetchData = async () => {\n      try {\n        //jsonplaceholder로부터 얻어온 데이터를 response에 저장\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n        //response객체\n        //서버로부터 응답을 나타내는 객체\n        //ok : HTTP 상태 코드가 200 ~ 299 범위에 있을 경우 true, 그렇지 않으면 false\n        if (!response.ok) {\n          throw new Error('데이터를 불러오는데 실패했습니다.');\n        }\n        //받아온 데이터를 json으로 변환\n        const data = await response.json();\n        SetPosts(data); //상태에 데이터를 저장\n      } catch (err) {\n        SetError(err.message); //에러 처리\n      } finally {\n        SetLoading(false); //로딩 상태를 완료로 설정\n      }\n    };\n    fetchData(); //함수 호출\n  }, []); //컴포넌트가 처음 렌더링될 때 한 번만 실행\n\n  //로딩중일 때 보여줄 내용\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB85C\\uB529\\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this);\n  }\n\n  //에러 발생시 보여줄 내용\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uC5D0\\uB7EC \\uBC1C\\uC0DD : \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  }\n\n  //데이터를 성공적으로 불러왔을 때 보여줄 내용\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.slice(0, 10).map(post => {\n        /*#__PURE__*/_jsxDEV(\"li\", {\n          children: post.title\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(FetchExam, \"Soxz0rcJt766iCcGqBa1tYrswsc=\");\n_c = FetchExam;\nexport default FetchExam;\nvar _c;\n$RefreshReg$(_c, \"FetchExam\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FetchExam","_s","posts","SetPosts","loading","SetLoading","error","SetError","fetchData","response","fetch","ok","Error","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","post","title","id","_c","$RefreshReg$"],"sources":["D:/kimangsub/3.WEB/work/react-workspace/-/async-react-app/src/FetchExam.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\nfunction FetchExam(){\r\n    const [posts, SetPosts] = useState([]); //데이터를 저장할 state\r\n    const [loading, SetLoading] = useState(true); //로딩 상태 관리\r\n    const [error, SetError] = useState(null); //에러 상태 관리\r\n\r\n    useEffect(() => {\r\n        //비동기적으로 데이터 호출\r\n        const fetchData = async () => {\r\n            try{\r\n                //jsonplaceholder로부터 얻어온 데이터를 response에 저장\r\n                const response = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n                //response객체\r\n                //서버로부터 응답을 나타내는 객체\r\n                //ok : HTTP 상태 코드가 200 ~ 299 범위에 있을 경우 true, 그렇지 않으면 false\r\n                if(!response.ok){\r\n                    throw new Error('데이터를 불러오는데 실패했습니다.');\r\n                }\r\n                //받아온 데이터를 json으로 변환\r\n                const data = await response.json()\r\n                SetPosts(data); //상태에 데이터를 저장\r\n            } catch(err){\r\n                SetError(err.message); //에러 처리\r\n            } finally{\r\n                SetLoading(false); //로딩 상태를 완료로 설정\r\n            }\r\n        }\r\n        fetchData(); //함수 호출\r\n    }, []); //컴포넌트가 처음 렌더링될 때 한 번만 실행\r\n\r\n    //로딩중일 때 보여줄 내용\r\n    if(loading){\r\n        return (<p>로딩중...</p>);\r\n    }\r\n\r\n    //에러 발생시 보여줄 내용\r\n    if(error){\r\n        return(<p>에러 발생 : {error}</p>)\r\n    }\r\n\r\n    //데이터를 성공적으로 불러왔을 때 보여줄 내용\r\n    return(\r\n        <div>\r\n            <h1>게시글 목록</h1>\r\n            <ul>\r\n                {/* posts.slice(0,10)는 posts배열에서 인덱스 0번부터 9번까지의\r\n                첫 10개의 게시글을 잘라서 새로운 배열에 반환한다. */}\r\n                {posts.slice(0,10).map((post) => {\r\n                    <li key={post.id}>{post.title}</li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FetchExam;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,SAASA,CAAA,EAAE;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAG;QACC;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;QAC1E;QACA;QACA;QACA,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAC;UACZ,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;QACzC;QACA;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC,OAAME,GAAG,EAAC;QACRR,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;MAC3B,CAAC,SAAQ;QACLX,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACvB;IACJ,CAAC;IACDG,SAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,IAAGJ,OAAO,EAAC;IACP,oBAAQL,OAAA;MAAAkB,QAAA,EAAG;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACzB;;EAEA;EACA,IAAGf,KAAK,EAAC;IACL,oBAAOP,OAAA;MAAAkB,QAAA,GAAG,8BAAQ,EAACX,KAAK;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACjC;;EAEA;EACA,oBACItB,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACftB,OAAA;MAAAkB,QAAA,EAGKf,KAAK,CAACoB,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAK;QAC7B,aAAAzB,OAAA;UAAAkB,QAAA,EAAmBO,IAAI,CAACC;QAAK,GAApBD,IAAI,CAACE,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkB,CAAC;MACvC,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACpB,EAAA,CApDQD,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AAsDlB,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}